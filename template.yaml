AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PatchPilot - Agentic Patch & Vulnerability Orchestrator

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: python3.12
    Environment:
      Variables:
        DYNAMODB_TABLE_PATCH_RUNS: !Sub 'PatchRuns-${Environment}'
        DYNAMODB_TABLE_PLANS: !Sub 'PatchPlans-${Environment}'
        DYNAMODB_TABLE: !Sub 'PatchPilotExecutions-${Environment}'
        BEDROCK_MODEL_ID: us.anthropic.claude-3-5-haiku-20241022-v1:0

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod

Resources:
  # DynamoDB Tables (already exist - created manually)
  # Using existing tables: PatchRuns-dev, PatchPlans-dev, PatchPilotExecutions-dev

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PatchRuns-${Environment}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PatchPlans-${Environment}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PatchPilotExecutions-${Environment}'
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
        - PolicyName: SecurityHubAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - securityhub:GetFindings
                Resource: '*'

  # Lambda Functions
  WebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'patchpilot-webhook-${Environment}'
      CodeUri: backend/src
      Handler: lambda_handler.webhook_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /webhook/superops
            Method: POST

  PlanApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'patchpilot-plan-approval-${Environment}'
      CodeUri: backend/src
      Handler: lambda_handler.plan_approval_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /plan/approve
            Method: POST

  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'patchpilot-health-check-${Environment}'
      CodeUri: backend/src
      Handler: lambda_handler.health_check_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /health-check
            Method: POST

  DashboardApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'patchpilot-dashboard-${Environment}'
      CodeUri: backend/src
      Handler: lambda_handler.dashboard_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetPlans:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/plans
            Method: GET
        GetRuns:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/runs
            Method: GET
        GetKPIs:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/kpis
            Method: GET
        UpdatePlan:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/plans/{plan_id}
            Method: PUT
        GetPlansHistory:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/plans/history
            Method: GET
        GeneratePlan:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/plans/generate
            Method: POST
        UpdatePlanPost:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/plans/update
            Method: POST
        ApprovePlan:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/approve-plan
            Method: POST
        RejectPlan:
          Type: Api
          Properties:
            RestApiId: !Ref PatchPilotApi
            Path: /api/dashboard/reject-plan
            Method: POST

  # API Gateway
  PatchPilotApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'patchpilot-api-${Environment}'
      StageName: !Ref Environment
      TracingEnabled: false
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

Outputs:
  WebhookUrl:
    Description: Webhook endpoint URL
    Value: !Sub 'https://${PatchPilotApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/webhook/superops'

  PlanApprovalUrl:
    Description: Plan approval endpoint URL
    Value: !Sub 'https://${PatchPilotApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/plan/approve'

  DashboardApiUrl:
    Description: Dashboard API endpoint URL
    Value: !Sub 'https://${PatchPilotApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/dashboard'

  PatchRunsTableName:
    Description: DynamoDB table for patch runs (existing)
    Value: !Sub 'PatchRuns-${Environment}'

  PatchPlansTableName:
    Description: DynamoDB table for patch plans (existing)
    Value: !Sub 'PatchPlans-${Environment}'

